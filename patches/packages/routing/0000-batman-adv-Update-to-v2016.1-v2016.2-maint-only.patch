From: Sven Eckelmann <sven@narfation.org>
Date: Sun, 12 Jun 2016 11:33:55 +0200
Subject: [PATCH] batman-adv: Update to v2016.1 + v2016.2-maint-only
---
 batman-adv/Config.in                               |   4 +
 batman-adv/Makefile                                |  55 ++++---
 batman-adv/files/compat-hacks.h                    |  76 +++++++++
 batman-adv/files/lib/netifd/proto/batadv.sh        |   8 +-
 ...don-t-access-unregistered-net_device-obje.patch |  46 ------
 ...make-sure-ELP-OGM-orig-MAC-is-updated-on-.patch |  64 ++++++++
 ...Add-lower-layer-needed_-head-tail-room-to.patch | 101 ------------
 ...-adv-Avoid-duplicate-neigh_node-additions.patch |  89 +++++++++++
 ...Avoid-nullptr-derefence-in-batadv_v_neigh.patch |  38 +++++
 ...Fix-memory-leak-on-tt-add-with-invalid-vl.patch |  43 ------
 ...an-adv-Fix-refcnt-leak-in-batadv_v_neigh_.patch |  81 ++++++++++
 ...Remove-unnecessary-braces-for-test_bit-in.patch |  32 ----
 ...Fix-double-neigh_node_put-in-batadv_v_ogm.patch |  40 +++++
 ...Remove-unnecessary-braces-for-test_bit-in.patch |  32 ----
 ...Remove-unnecessary-braces-for-test_bit-in.patch |  41 -----
 ...initialize-ELP-orig-address-on-secondary-.patch | 110 +++++++++++++
 ...Add-missing-include-for-batadv_v_neigh_is.patch |  28 ++++
 ...adv-fix-speedy-join-for-DAT-cache-replies.patch |  58 -------
 ...n-adv-avoid-keeping-false-temporary-entry.patch |  51 ------
 .../0008-batman-adv-fix-skb-deref-after-free.patch |  46 ++++++
 ...v-detect-local-excess-vlans-in-TT-request.patch |  55 -------
 ...replace-WARN-with-rate-limited-output-on-.patch |  40 +++++
 ...Fix-build-against-recent-Debian-Stretch-k.patch |  58 +++++++
 ...Clean-up-untagged-vlan-when-destroying-vi.patch |  45 ++++++
 ...Fix-ICMP-RR-ethernet-access-after-skb_lin.patch |  31 ++++
 ...-batman-adv-Fix-double-put-of-vlan-object.patch |  32 ++++
 ...Fix-use-after-free-double-free-of-tt_req_.patch | 172 +++++++++++++++++++++
 27 files changed, 995 insertions(+), 481 deletions(-)
 create mode 100644 batman-adv/files/compat-hacks.h
 delete mode 100644 batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch
 create mode 100644 batman-adv/patches/0001-batman-adv-make-sure-ELP-OGM-orig-MAC-is-updated-on-.patch
 delete mode 100644 batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch
 create mode 100644 batman-adv/patches/0002-batman-adv-Avoid-duplicate-neigh_node-additions.patch
 create mode 100644 batman-adv/patches/0003-batman-adv-Avoid-nullptr-derefence-in-batadv_v_neigh.patch
 delete mode 100644 batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch
 create mode 100644 batman-adv/patches/0004-batman-adv-Fix-refcnt-leak-in-batadv_v_neigh_.patch
 delete mode 100644 batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
 create mode 100644 batman-adv/patches/0005-batman-adv-Fix-double-neigh_node_put-in-batadv_v_ogm.patch
 delete mode 100644 batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
 delete mode 100644 batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
 create mode 100644 batman-adv/patches/0006-batman-adv-initialize-ELP-orig-address-on-secondary-.patch
 create mode 100644 batman-adv/patches/0007-batman-adv-Add-missing-include-for-batadv_v_neigh_is.patch
 delete mode 100644 batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch
 delete mode 100644 batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch
 create mode 100644 batman-adv/patches/0008-batman-adv-fix-skb-deref-after-free.patch
 delete mode 100644 batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch
 create mode 100644 batman-adv/patches/0009-batman-adv-replace-WARN-with-rate-limited-output-on-.patch
 create mode 100644 batman-adv/patches/0010-batman-adv-Fix-build-against-recent-Debian-Stretch-k.patch
 create mode 100644 batman-adv/patches/0011-batman-adv-Clean-up-untagged-vlan-when-destroying-vi.patch
 create mode 100644 batman-adv/patches/0012-batman-adv-Fix-ICMP-RR-ethernet-access-after-skb_lin.patch
 create mode 100644 batman-adv/patches/0013-batman-adv-Fix-double-put-of-vlan-object.patch
 create mode 100644 batman-adv/patches/0014-batman-adv-Fix-use-after-free-double-free-of-tt_req_.patch

diff --git a/batman-adv/Config.in b/batman-adv/Config.in
index 86fc795..48092e7 100644
--- a/batman-adv/Config.in
+++ b/batman-adv/Config.in
@@ -24,3 +24,7 @@ config KMOD_BATMAN_ADV_NC
 	depends on PACKAGE_kmod-batman-adv
 	default n
 
+config KMOD_BATMAN_ADV_BATMAN_V
+	bool "enable batman v routing algorithm"
+	depends on PACKAGE_kmod-batman-adv
+	default n
diff --git a/batman-adv/Makefile b/batman-adv/Makefile
index 7e43de4..d222c0b 100644
--- a/batman-adv/Makefile
+++ b/batman-adv/Makefile
@@ -10,12 +10,12 @@ include $(TOPDIR)/rules.mk
 
 PKG_NAME:=batman-adv
 
-PKG_VERSION:=2015.1
-PKG_RELEASE:=1
-PKG_MD5SUM:=45f98d315b4290dc208e01190193c514
+PKG_VERSION:=2016.1
+PKG_RELEASE:=2
+PKG_MD5SUM:=8c8e449009b4d29512d26ee308960bb5
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
-PKG_SOURCE_URL:=http://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
+PKG_SOURCE_URL:=https://downloads.open-mesh.org/batman/releases/batman-adv-$(PKG_VERSION)
 PKG_LICENSE:=GPL-2.0
 
 PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)/$(PKG_NAME)-$(PKG_VERSION)
@@ -24,13 +24,13 @@ include $(INCLUDE_DIR)/package.mk
 include $(INCLUDE_DIR)/kernel.mk
 
 define KernelPackage/batman-adv
-  URL:=http://www.open-mesh.org/
+  URL:=https://www.open-mesh.org/
   MAINTAINER:=Marek Lindner <mareklindner@neomailbox.ch>
   SUBMENU:=Network Support
-  DEPENDS:=+KMOD_BATMAN_ADV_BLA:kmod-lib-crc16 +kmod-crypto-core +kmod-crypto-crc32c +kmod-lib-crc32c
+  DEPENDS:=+KMOD_BATMAN_ADV_BLA:kmod-lib-crc16 +kmod-crypto-crc32c +kmod-lib-crc32c +kmod-cfg80211
   TITLE:=B.A.T.M.A.N. Adv
   FILES:=$(PKG_BUILD_DIR)/net/batman-adv/batman-adv.$(LINUX_KMOD_SUFFIX)
-  AUTOLOAD:=$(call AutoLoad,50,batman-adv)
+  AUTOLOAD:=$(call AutoLoad,50,cfg80211 batman-adv)
 endef
 
 define KernelPackage/batman-adv/description
@@ -47,31 +47,46 @@ define Package/kmod-batman-adv/conffiles
 /etc/config/batman-adv
 endef
 
-MAKE_BATMAN_ADV_ARGS += \
-	CROSS_COMPILE="$(TARGET_CROSS)" \
-	KERNELPATH="$(LINUX_DIR)" \
-	ARCH="$(LINUX_KARCH)" \
-	PATH="$(TARGET_PATH)" \
-	SUBDIRS="$(PKG_BUILD_DIR)" \
-	PWD="$(PKG_BUILD_DIR)" \
-	LINUX_VERSION="$(LINUX_VERSION)" \
+PKG_EXTRA_KCONFIG:= \
+	CONFIG_BATMAN_ADV=m \
 	CONFIG_BATMAN_ADV_DEBUG=$(if $(CONFIG_KMOD_BATMAN_ADV_DEBUG_LOG),y,n) \
 	CONFIG_BATMAN_ADV_BLA=$(if $(CONFIG_KMOD_BATMAN_ADV_BLA),y,n) \
 	CONFIG_BATMAN_ADV_DAT=$(if $(CONFIG_KMOD_BATMAN_ADV_DAT),y,n) \
 	CONFIG_BATMAN_ADV_MCAST=$(if $(CONFIG_KMOD_BATMAN_ADV_MCAST),y,n) \
 	CONFIG_BATMAN_ADV_NC=$(if $(CONFIG_KMOD_BATMAN_ADV_NC),y,n) \
-	REVISION="" all
+	CONFIG_BATMAN_ADV_BATMAN_V=$(if $(CONFIG_KMOD_BATMAN_ADV_BATMAN_V),y,n) \
+
+PKG_EXTRA_CFLAGS:= \
+	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=m,%,$(filter %=m,$(PKG_EXTRA_KCONFIG)))) \
+	$(patsubst CONFIG_%, -DCONFIG_%=1, $(patsubst %=y,%,$(filter %=y,$(PKG_EXTRA_KCONFIG)))) \
+
+NOSTDINC_FLAGS = \
+	-I$(PKG_BUILD_DIR)/net/batman-adv \
+	-I$(STAGING_DIR)/usr/include/mac80211-backport/uapi \
+	-I$(STAGING_DIR)/usr/include/mac80211-backport \
+	-I$(STAGING_DIR)/usr/include/mac80211/uapi \
+	-I$(STAGING_DIR)/usr/include/mac80211 \
+	-include backport/backport.h \
+	-include $(PKG_BUILD_DIR)/compat-hacks.h
+
+define Build/Compile
+	+$(MAKE) $(PKG_JOBS) -C "$(LINUX_DIR)" \
+		ARCH="$(LINUX_KARCH)" \
+		CROSS_COMPILE="$(TARGET_CROSS)" \
+		SUBDIRS="$(PKG_BUILD_DIR)/net/batman-adv" \
+		$(PKG_EXTRA_KCONFIG) \
+		EXTRA_CFLAGS="$(PKG_EXTRA_CFLAGS)" \
+		NOSTDINC_FLAGS="$(NOSTDINC_FLAGS)" \
+		modules
+endef
 
 define Build/Prepare
 	$(call Build/Prepare/Default)
+	$(CP) ./files/compat-hacks.h $(PKG_BUILD_DIR)/
 	$(SED) '/#define _NET_BATMAN_ADV_MAIN_H_/a\#undef CONFIG_MODULE_STRIPPED' \
 		$(PKG_BUILD_DIR)/net/batman-adv/main.h
 endef
 
-define Build/Compile
-	$(MAKE) -C "$(PKG_BUILD_DIR)" $(MAKE_BATMAN_ADV_ARGS)
-endef
-
 define Build/Clean
         rm -rf $(BUILD_DIR)/$(PKG_NAME)/
 endef
diff --git a/batman-adv/files/compat-hacks.h b/batman-adv/files/compat-hacks.h
new file mode 100644
index 0000000..5126fc2
--- /dev/null
+++ b/batman-adv/files/compat-hacks.h
@@ -0,0 +1,76 @@
+/* Please avoid adding hacks here - instead add it to mac80211/backports.git */
+
+#include <linux/version.h>	/* LINUX_VERSION_CODE */
+#include <linux/types.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 1, 0)
+
+#define dev_get_iflink(_net_dev) ((_net_dev)->iflink)
+
+#endif /* < KERNEL_VERSION(4, 1, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 9, 0)
+
+#include <linux/netdevice.h>
+
+#define netdev_master_upper_dev_link(dev, upper_dev, upper_priv, upper_info) ({\
+	BUILD_BUG_ON(upper_priv != NULL); \
+	BUILD_BUG_ON(upper_info != NULL); \
+	netdev_set_master(dev, upper_dev); \
+})
+
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(4, 5, 0)
+
+#include <linux/netdevice.h>
+
+#define netdev_master_upper_dev_link(dev, upper_dev, upper_priv, upper_info) ({\
+	BUILD_BUG_ON(upper_priv != NULL); \
+	BUILD_BUG_ON(upper_info != NULL); \
+	netdev_master_upper_dev_link(dev, upper_dev); \
+})
+
+#endif /* < KERNEL_VERSION(4, 5, 0) */
+
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+
+#define IFF_NO_QUEUE	0; dev->tx_queue_len = 0
+
+#endif /* < KERNEL_VERSION(4, 3, 0) */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
+
+#include <linux/ethtool.h>
+
+#define ethtool_link_ksettings batadv_ethtool_link_ksettings
+
+struct batadv_ethtool_link_ksettings {
+	struct {
+		__u32	speed;
+		__u8	duplex;
+	} base;
+};
+
+#define __ethtool_get_link_ksettings(__dev, __link_settings) \
+	batadv_ethtool_get_link_ksettings(__dev, __link_settings)
+
+static inline int
+batadv_ethtool_get_link_ksettings(struct net_device *dev,
+				  struct ethtool_link_ksettings *link_ksettings)
+{
+	struct ethtool_cmd cmd;
+	int ret;
+
+	memset(&cmd, 0, sizeof(cmd));
+	ret = __ethtool_get_settings(dev, &cmd);
+
+	if (ret != 0)
+		return ret;
+
+	link_ksettings->base.duplex = cmd.duplex;
+	link_ksettings->base.speed = ethtool_cmd_speed(&cmd);
+
+	return 0;
+}
+
+#endif /* < KERNEL_VERSION(4, 6, 0) */
diff --git a/batman-adv/files/lib/netifd/proto/batadv.sh b/batman-adv/files/lib/netifd/proto/batadv.sh
index 632a209..1e0c9d0 100644
--- a/batman-adv/files/lib/netifd/proto/batadv.sh
+++ b/batman-adv/files/lib/netifd/proto/batadv.sh
@@ -6,14 +6,18 @@ init_proto "$@"
 
 proto_batadv_init_config() {
 	proto_config_add_string "mesh"
+	proto_config_add_string "routing_algo"
 }
 
 proto_batadv_setup() {
 	local config="$1"
 	local iface="$2"
 
-	local mesh
-	json_get_vars mesh
+	local mesh routing_algo
+	json_get_vars mesh routing_algo
+
+	[ -n "$routing_algo" ] || routing_algo="BATMAN_IV"
+	echo "$routing_algo" > "/sys/module/batman_adv/parameters/routing_algo"
 
 	echo "$mesh" > "/sys/class/net/$iface/batman_adv/mesh_iface"
 	proto_init_update "$iface" 1
diff --git a/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch b/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch
deleted file mode 100644
index 75da6fb..0000000
--- a/batman-adv/patches/0001-batman-adv-don-t-access-unregistered-net_device-obje.patch
+++ /dev/null
@@ -1,46 +0,0 @@
-From 958aafba93c7e408237298c5b2c5d7c3e318402c Mon Sep 17 00:00:00 2001
-From: Antonio Quartulli <antonio@meshcoding.com>
-Date: Tue, 4 Aug 2015 22:26:19 +0200
-Subject: [PATCH 1/9] batman-adv: don't access unregistered net_device object
-
-In batadv_hardif_disable_interface() there is a call to
-batadv_softif_destroy_sysfs() which in turns invokes
-unregister_netdevice() on the soft_iface.
-After this point we cannot rely on the soft_iface object
-anymore because it might get free'd by the netdev periodic
-routine at any time.
-
-For this reason the netdev_upper_dev_unlink(.., soft_iface) call
-is moved before the invocation of batadv_softif_destroy_sysfs() so
-that we can be sure that the soft_iface object is still valid.
-
-Signed-off-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/hard-interface.c | 3 ++-
- 1 file changed, 2 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
-index f4a15d2..0565b20 100644
---- a/net/batman-adv/hard-interface.c
-+++ b/net/batman-adv/hard-interface.c
-@@ -528,6 +528,8 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 	batadv_purge_outstanding_packets(bat_priv, hard_iface);
- 	dev_put(hard_iface->soft_iface);
- 
-+	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
-+
- 	/* nobody uses this interface anymore */
- 	if (!bat_priv->num_ifaces) {
- 		batadv_gw_check_client_stop(bat_priv);
-@@ -536,7 +538,6 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 			batadv_softif_destroy_sysfs(hard_iface->soft_iface);
- 	}
- 
--	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
- 	hard_iface->soft_iface = NULL;
- 	batadv_hardif_free_ref(hard_iface);
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0001-batman-adv-make-sure-ELP-OGM-orig-MAC-is-updated-on-.patch b/batman-adv/patches/0001-batman-adv-make-sure-ELP-OGM-orig-MAC-is-updated-on-.patch
new file mode 100644
index 0000000..70adb91
--- /dev/null
+++ b/batman-adv/patches/0001-batman-adv-make-sure-ELP-OGM-orig-MAC-is-updated-on-.patch
@@ -0,0 +1,64 @@
+From a636bf0b69010222ea58337d425ca9ff8ce52639 Mon Sep 17 00:00:00 2001
+From: Antonio Quartulli <a@unstable.cc>
+Date: Mon, 2 May 2016 18:27:38 +0800
+Subject: [PATCH 1/6] batman-adv: make sure ELP/OGM orig MAC is updated on
+ address change
+
+When the MAC address of the primary interface is changed,
+update the originator address in the ELP and OGM skb buffers as
+well in order to reflect the change.
+
+Fixes: a4b88af77e28 ("batman-adv: ELP - adding basic infrastructure")
+Reported-by: Marek Lindner <marek@neomailbox.ch>
+Signed-off-by: Antonio Quartulli <a@unstable.cc>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/bat_v.c | 26 ++++++++++++++++++++++----
+ 1 file changed, 22 insertions(+), 4 deletions(-)
+
+diff --git a/net/batman-adv/bat_v.c b/net/batman-adv/bat_v.c
+index 4026f19..4547fce 100644
+--- a/net/batman-adv/bat_v.c
++++ b/net/batman-adv/bat_v.c
+@@ -72,16 +72,34 @@ static void batadv_v_iface_disable(struct batadv_hard_iface *hard_iface)
+ 	batadv_v_elp_iface_disable(hard_iface);
+ }
+ 
+-static void batadv_v_iface_update_mac(struct batadv_hard_iface *hard_iface)
+-{
+-}
+-
+ static void batadv_v_primary_iface_set(struct batadv_hard_iface *hard_iface)
+ {
+ 	batadv_v_elp_primary_iface_set(hard_iface);
+ 	batadv_v_ogm_primary_iface_set(hard_iface);
+ }
+ 
++/**
++ * batadv_v_iface_update_mac - react to hard-interface MAC address change
++ * @hard_iface: the modified interface
++ *
++ * If the modified interface is the primary one, update the originator
++ * address in the ELP and OGM messages to reflect the new MAC address.
++ */
++static void batadv_v_iface_update_mac(struct batadv_hard_iface *hard_iface)
++{
++	struct batadv_priv *bat_priv = netdev_priv(hard_iface->soft_iface);
++	struct batadv_hard_iface *primary_if;
++
++	primary_if = batadv_primary_if_get_selected(bat_priv);
++	if (primary_if != hard_iface)
++		goto out;
++
++	batadv_v_primary_iface_set(hard_iface);
++out:
++	if (primary_if)
++		batadv_hardif_put(primary_if);
++}
++
+ static void
+ batadv_v_hardif_neigh_init(struct batadv_hardif_neigh_node *hardif_neigh)
+ {
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch b/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch
deleted file mode 100644
index 681c4b2..0000000
--- a/batman-adv/patches/0002-batman-adv-Add-lower-layer-needed_-head-tail-room-to.patch
+++ /dev/null
@@ -1,101 +0,0 @@
-From e2b4301f4e2d3695ed2024880d2295223cb2f857 Mon Sep 17 00:00:00 2001
-From: Sven Eckelmann <sven@narfation.org>
-Date: Fri, 7 Aug 2015 19:28:42 +0200
-Subject: [PATCH 2/9] batman-adv: Add lower layer needed_(head|tail)room to own
- ones
-
-The maximum of hard_header_len and maximum of all needed_(head|tail)room of
-all slave interfaces of a batman-adv device must be used to define the
-batman-adv device needed_(head|tail)room. This is required to avoid too
-small buffer problems when these slave devices try to send the encapsulated
-packet in a tx path without the possibility to resize the skbuff.
-
-Signed-off-by: Sven Eckelmann <sven@narfation.org>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/hard-interface.c | 41 +++++++++++++++++++++++++++++++++++++++++
- net/batman-adv/soft-interface.c |  2 --
- 2 files changed, 41 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/hard-interface.c b/net/batman-adv/hard-interface.c
-index 0565b20..f11345e 100644
---- a/net/batman-adv/hard-interface.c
-+++ b/net/batman-adv/hard-interface.c
-@@ -252,6 +252,44 @@ static void batadv_check_known_mac_addr(const struct net_device *net_dev)
- 	rcu_read_unlock();
- }
- 
-+/**
-+ * batadv_hardif_recalc_extra_skbroom() - Recalculate skbuff extra head/tailroom
-+ * @soft_iface: netdev struct of the mesh interface
-+ */
-+static void batadv_hardif_recalc_extra_skbroom(struct net_device *soft_iface)
-+{
-+	const struct batadv_hard_iface *hard_iface;
-+	unsigned short lower_header_len = ETH_HLEN;
-+	unsigned short lower_headroom = 0;
-+	unsigned short lower_tailroom = 0;
-+	unsigned short needed_headroom;
-+
-+	rcu_read_lock();
-+	list_for_each_entry_rcu(hard_iface, &batadv_hardif_list, list) {
-+		if (hard_iface->if_status == BATADV_IF_NOT_IN_USE)
-+			continue;
-+
-+		if (hard_iface->soft_iface != soft_iface)
-+			continue;
-+
-+		lower_header_len = max_t(unsigned short, lower_header_len,
-+					 hard_iface->net_dev->hard_header_len);
-+
-+		lower_headroom = max_t(unsigned short, lower_headroom,
-+				       hard_iface->net_dev->needed_headroom);
-+
-+		lower_tailroom = max_t(unsigned short, lower_tailroom,
-+				       hard_iface->net_dev->needed_tailroom);
-+	}
-+	rcu_read_unlock();
-+
-+	needed_headroom = lower_headroom + (lower_header_len - ETH_HLEN);
-+	needed_headroom += batadv_max_header_len();
-+
-+	soft_iface->needed_headroom = needed_headroom;
-+	soft_iface->needed_tailroom = lower_tailroom;
-+}
-+
- int batadv_hardif_min_mtu(struct net_device *soft_iface)
- {
- 	struct batadv_priv *bat_priv = netdev_priv(soft_iface);
-@@ -474,6 +512,8 @@ int batadv_hardif_enable_interface(struct batadv_hard_iface *hard_iface,
- 			   "Not using interface %s (retrying later): interface not active\n",
- 			   hard_iface->net_dev->name);
- 
-+	batadv_hardif_recalc_extra_skbroom(soft_iface);
-+
- 	/* begin scheduling originator messages on that interface */
- 	batadv_schedule_bat_ogm(hard_iface);
- 
-@@ -529,6 +569,7 @@ void batadv_hardif_disable_interface(struct batadv_hard_iface *hard_iface,
- 	dev_put(hard_iface->soft_iface);
- 
- 	netdev_upper_dev_unlink(hard_iface->net_dev, hard_iface->soft_iface);
-+	batadv_hardif_recalc_extra_skbroom(hard_iface->soft_iface);
- 
- 	/* nobody uses this interface anymore */
- 	if (!bat_priv->num_ifaces) {
-diff --git a/net/batman-adv/soft-interface.c b/net/batman-adv/soft-interface.c
-index 51cda3a..10f6448 100644
---- a/net/batman-adv/soft-interface.c
-+++ b/net/batman-adv/soft-interface.c
-@@ -947,8 +947,6 @@ static void batadv_softif_init_early(struct net_device *dev)
- 	 * have not been initialized yet
- 	 */
- 	dev->mtu = ETH_DATA_LEN;
--	/* reserve more space in the skbuff for our header */
--	dev->hard_header_len = batadv_max_header_len();
- 
- 	/* generate random address */
- 	eth_hw_addr_random(dev);
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0002-batman-adv-Avoid-duplicate-neigh_node-additions.patch b/batman-adv/patches/0002-batman-adv-Avoid-duplicate-neigh_node-additions.patch
new file mode 100644
index 0000000..ea191b3
--- /dev/null
+++ b/batman-adv/patches/0002-batman-adv-Avoid-duplicate-neigh_node-additions.patch
@@ -0,0 +1,89 @@
+From 8013ae257447c99d7ba037967458f91ceb4051ae Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
+Date: Thu, 7 Jan 2016 08:11:12 +0100
+Subject: [PATCH 2/6] batman-adv: Avoid duplicate neigh_node additions
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+Two parallel calls to batadv_neigh_node_new() might race for creating
+and adding the same neig_node. Fix this by including the check for any
+already existing, identical neigh_node within the spin-lock.
+
+This fixes splats like the following:
+
+[  739.535069] ------------[ cut here ]------------
+[  739.535079] WARNING: CPU: 0 PID: 0 at /usr/src/batman-adv/git/batman-adv/net/batman-adv/bat_iv_ogm.c:1004 batadv_iv_ogm_process_per_outif+0xe3f/0xe60 [batman_adv]()
+[  739.535092] too many matching neigh_nodes
+[  739.535094] Modules linked in: dm_mod tun ip6table_filter ip6table_mangle ip6table_nat nf_nat_ipv6 ip6_tables xt_nat iptable_nat nf_nat_ipv4 nf_nat xt_TCPMSS xt_mark iptable_mangle xt_tcpudp xt_conntrack iptable_filter ip_tables x_tables ip_gre ip_tunnel gre bridge stp llc thermal_sys kvm_intel kvm crct10dif_pclmul crc32_pclmul sha256_ssse3 sha256_generic hmac drbg ansi_cprng aesni_intel aes_x86_64 lrw gf128mul glue_helper ablk_helper cryptd evdev pcspkr ip6_gre ip6_tunnel tunnel6 batman_adv(O) libcrc32c nf_conntrack_ipv6 nf_defrag_ipv6 nf_conntrack_ipv4 nf_defrag_ipv4 nf_conntrack autofs4 ext4 crc16 mbcache jbd2 xen_netfront xen_blkfront crc32c_intel
+[  739.535177] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        W  O    4.2.0-0.bpo.1-amd64 #1 Debian 4.2.6-3~bpo8+2
+[  739.535186]  0000000000000000 ffffffffa013b050 ffffffff81554521 ffff88007d003c18
+[  739.535201]  ffffffff8106fa01 0000000000000000 ffff8800047a087a ffff880079c3a000
+[  739.735602]  ffff88007b82bf40 ffff88007bc2d1c0 ffffffff8106fa7a ffffffffa013aa8e
+[  739.735624] Call Trace:
+[  739.735639]  <IRQ>  [<ffffffff81554521>] ? dump_stack+0x40/0x50
+[  739.735677]  [<ffffffff8106fa01>] ? warn_slowpath_common+0x81/0xb0
+[  739.735692]  [<ffffffff8106fa7a>] ? warn_slowpath_fmt+0x4a/0x50
+[  739.735715]  [<ffffffffa012448f>] ? batadv_iv_ogm_process_per_outif+0xe3f/0xe60 [batman_adv]
+[  739.735740]  [<ffffffffa0124813>] ? batadv_iv_ogm_receive+0x363/0x380 [batman_adv]
+[  739.735762]  [<ffffffffa0124813>] ? batadv_iv_ogm_receive+0x363/0x380 [batman_adv]
+[  739.735783]  [<ffffffff810b0841>] ? __raw_callee_save___pv_queued_spin_unlock+0x11/0x20
+[  739.735804]  [<ffffffffa012cb39>] ? batadv_batman_skb_recv+0xc9/0x110 [batman_adv]
+[  739.735825]  [<ffffffff81464891>] ? __netif_receive_skb_core+0x841/0x9a0
+[  739.735838]  [<ffffffff810b0841>] ? __raw_callee_save___pv_queued_spin_unlock+0x11/0x20
+[  739.735853]  [<ffffffff81465681>] ? process_backlog+0xa1/0x140
+[  739.735864]  [<ffffffff81464f1a>] ? net_rx_action+0x20a/0x320
+[  739.735878]  [<ffffffff81073aa7>] ? __do_softirq+0x107/0x270
+[  739.735891]  [<ffffffff81073d82>] ? irq_exit+0x92/0xa0
+[  739.735905]  [<ffffffff8137e0d1>] ? xen_evtchn_do_upcall+0x31/0x40
+[  739.735924]  [<ffffffff8155b8fe>] ? xen_do_hypervisor_callback+0x1e/0x40
+[  739.735939]  <EOI>  [<ffffffff810013aa>] ? xen_hypercall_sched_op+0xa/0x20
+[  739.735965]  [<ffffffff810013aa>] ? xen_hypercall_sched_op+0xa/0x20
+[  739.735979]  [<ffffffff8100a39c>] ? xen_safe_halt+0xc/0x20
+[  739.735991]  [<ffffffff8101da6c>] ? default_idle+0x1c/0xa0
+[  739.736004]  [<ffffffff810abf6b>] ? cpu_startup_entry+0x2eb/0x350
+[  739.736019]  [<ffffffff81b2af5e>] ? start_kernel+0x480/0x48b
+[  739.736032]  [<ffffffff81b2d116>] ? xen_start_kernel+0x507/0x511
+[  739.736048] ---[ end trace c106bb901244bc8c ]---
+
+Reported-by: Martin Weinelt <martin@darmstadt.freifunk.net>
+Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/originator.c | 6 ++++--
+ 1 file changed, 4 insertions(+), 2 deletions(-)
+
+diff --git a/net/batman-adv/originator.c b/net/batman-adv/originator.c
+index c355a82..28241a4 100644
+--- a/net/batman-adv/originator.c
++++ b/net/batman-adv/originator.c
+@@ -630,6 +630,8 @@ batadv_neigh_node_new(struct batadv_orig_node *orig_node,
+ 	struct batadv_neigh_node *neigh_node;
+ 	struct batadv_hardif_neigh_node *hardif_neigh = NULL;
+ 
++	spin_lock_bh(&orig_node->neigh_list_lock);
++
+ 	neigh_node = batadv_neigh_node_get(orig_node, hard_iface, neigh_addr);
+ 	if (neigh_node)
+ 		goto out;
+@@ -666,15 +668,15 @@ batadv_neigh_node_new(struct batadv_orig_node *orig_node,
+ 	kref_init(&neigh_node->refcount);
+ 	kref_get(&neigh_node->refcount);
+ 
+-	spin_lock_bh(&orig_node->neigh_list_lock);
+ 	hlist_add_head_rcu(&neigh_node->list, &orig_node->neigh_list);
+-	spin_unlock_bh(&orig_node->neigh_list_lock);
+ 
+ 	batadv_dbg(BATADV_DBG_BATMAN, orig_node->bat_priv,
+ 		   "Creating new neighbor %pM for orig_node %pM on interface %s\n",
+ 		   neigh_addr, orig_node->orig, hard_iface->net_dev->name);
+ 
+ out:
++	spin_unlock_bh(&orig_node->neigh_list_lock);
++
+ 	if (hardif_neigh)
+ 		batadv_hardif_neigh_put(hardif_neigh);
+ 	return neigh_node;
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0003-batman-adv-Avoid-nullptr-derefence-in-batadv_v_neigh.patch b/batman-adv/patches/0003-batman-adv-Avoid-nullptr-derefence-in-batadv_v_neigh.patch
new file mode 100644
index 0000000..aa07ad5
--- /dev/null
+++ b/batman-adv/patches/0003-batman-adv-Avoid-nullptr-derefence-in-batadv_v_neigh.patch
@@ -0,0 +1,38 @@
+From 036aa7b7181ee96ae6971eb31dd97b6ace7c0a80 Mon Sep 17 00:00:00 2001
+From: Sven Eckelmann <sven@narfation.org>
+Date: Fri, 6 May 2016 11:43:38 +0200
+Subject: [PATCH 3/6] batman-adv: Avoid nullptr derefence in
+ batadv_v_neigh_is_sob
+
+batadv_neigh_ifinfo_get can return NULL when it cannot find (even when only
+temporarily) anymore the neigh_ifinfo in the list neigh->ifinfo_list. This
+has to be checked to avoid kernel Oopses when the ifinfo is dereferenced.
+
+This a situation which isn't expected but is already handled by functions
+like batadv_v_neigh_cmp. The same kind of warning is therefore used before
+the function returns without dereferencing the pointers.
+
+Fixes: b05bbab5e1fc ("batman-adv: B.A.T.M.A.N. V - implement neighbor comparison API calls")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/bat_v.c | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/net/batman-adv/bat_v.c b/net/batman-adv/bat_v.c
+index 4547fce..7e1467a 100644
+--- a/net/batman-adv/bat_v.c
++++ b/net/batman-adv/bat_v.c
+@@ -295,6 +295,9 @@ static bool batadv_v_neigh_is_sob(struct batadv_neigh_node *neigh1,
+ 	ifinfo1 = batadv_neigh_ifinfo_get(neigh1, if_outgoing1);
+ 	ifinfo2 = batadv_neigh_ifinfo_get(neigh2, if_outgoing2);
+ 
++	if (WARN_ON(!ifinfo1 || !ifinfo2))
++		return false;
++
+ 	threshold = ifinfo1->bat_v.throughput / 4;
+ 	threshold = ifinfo1->bat_v.throughput - threshold;
+ 
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch b/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch
deleted file mode 100644
index 8fc5f64..0000000
--- a/batman-adv/patches/0003-batman-adv-Fix-memory-leak-on-tt-add-with-invalid-vl.patch
+++ /dev/null
@@ -1,43 +0,0 @@
-From dba67bc80fbfe6a28fc3c1141cca1c556ab7e499 Mon Sep 17 00:00:00 2001
-From: Sven Eckelmann <sven@narfation.org>
-Date: Tue, 18 Aug 2015 13:37:01 +0200
-Subject: [PATCH 3/9] batman-adv: Fix memory leak on tt add with invalid vlan
-
-The object tt_local is allocated with kmalloc and not initialized when the
-function batadv_tt_local_add checks for the vlan. But this function can
-only cleanup the object when the (not yet initialized) reference counter of
-the object is 1. This is unlikely and thus the object would leak when the
-vlan could not be found.
-
-Instead the uninitialized object tt_local has to be freed manually and the
-pointer has to set to NULL to avoid calling the function which would try to
-decrement the reference counter of the not existing object.
-
-CID: 1316518
-Fixes: 354136bcc3c4 ("batman-adv: fix kernel crash due to missing NULL checks")
-Signed-off-by: Sven Eckelmann <sven@narfation.org>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 5 ++++-
- 1 file changed, 4 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 7986ec5..39283ff 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -595,8 +595,11 @@ bool batadv_tt_local_add(struct net_device *soft_iface, const uint8_t *addr,
- 	/* increase the refcounter of the related vlan */
- 	vlan = batadv_softif_vlan_get(bat_priv, vid);
- 	if (WARN(!vlan, "adding TT local entry %pM to non-existent VLAN %d",
--		 addr, BATADV_PRINT_VID(vid)))
-+		 addr, BATADV_PRINT_VID(vid))) {
-+		kfree(tt_local);
-+		tt_local = NULL;
- 		goto out;
-+	}
- 
- 	batadv_dbg(BATADV_DBG_TT, bat_priv,
- 		   "Creating new local tt entry: %pM (vid: %d, ttvn: %d)\n",
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0004-batman-adv-Fix-refcnt-leak-in-batadv_v_neigh_.patch b/batman-adv/patches/0004-batman-adv-Fix-refcnt-leak-in-batadv_v_neigh_.patch
new file mode 100644
index 0000000..15ef21c
--- /dev/null
+++ b/batman-adv/patches/0004-batman-adv-Fix-refcnt-leak-in-batadv_v_neigh_.patch
@@ -0,0 +1,81 @@
+From 650d41de4be2fe9e9d1842c1abdd357dedbaa7ba Mon Sep 17 00:00:00 2001
+From: Sven Eckelmann <sven@narfation.org>
+Date: Fri, 6 May 2016 11:43:39 +0200
+Subject: [PATCH 4/6] batman-adv: Fix refcnt leak in batadv_v_neigh_*
+
+The functions batadv_neigh_ifinfo_get increase the reference counter of the
+batadv_neigh_ifinfo. These have to be reduced again when the reference is
+not used anymore to correctly free the objects.
+
+Fixes: b05bbab5e1fc ("batman-adv: B.A.T.M.A.N. V - implement neighbor comparison API calls")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/bat_v.c | 32 +++++++++++++++++++++++++-------
+ 1 file changed, 25 insertions(+), 7 deletions(-)
+
+diff --git a/net/batman-adv/bat_v.c b/net/batman-adv/bat_v.c
+index 7e1467a..2bcb29b 100644
+--- a/net/batman-adv/bat_v.c
++++ b/net/batman-adv/bat_v.c
+@@ -274,14 +274,23 @@ static int batadv_v_neigh_cmp(struct batadv_neigh_node *neigh1,
+ 			      struct batadv_hard_iface *if_outgoing2)
+ {
+ 	struct batadv_neigh_ifinfo *ifinfo1, *ifinfo2;
++	int ret = 0;
+ 
+ 	ifinfo1 = batadv_neigh_ifinfo_get(neigh1, if_outgoing1);
++	if (WARN_ON(!ifinfo1))
++		goto err_ifinfo1;
++
+ 	ifinfo2 = batadv_neigh_ifinfo_get(neigh2, if_outgoing2);
++	if (WARN_ON(!ifinfo2))
++		goto err_ifinfo2;
+ 
+-	if (WARN_ON(!ifinfo1 || !ifinfo2))
+-		return 0;
++	ret = ifinfo1->bat_v.throughput - ifinfo2->bat_v.throughput;
+ 
+-	return ifinfo1->bat_v.throughput - ifinfo2->bat_v.throughput;
++	batadv_neigh_ifinfo_put(ifinfo2);
++err_ifinfo2:
++	batadv_neigh_ifinfo_put(ifinfo1);
++err_ifinfo1:
++	return ret;
+ }
+ 
+ static bool batadv_v_neigh_is_sob(struct batadv_neigh_node *neigh1,
+@@ -291,17 +300,26 @@ static bool batadv_v_neigh_is_sob(struct batadv_neigh_node *neigh1,
+ {
+ 	struct batadv_neigh_ifinfo *ifinfo1, *ifinfo2;
+ 	u32 threshold;
++	bool ret = false;
+ 
+ 	ifinfo1 = batadv_neigh_ifinfo_get(neigh1, if_outgoing1);
+-	ifinfo2 = batadv_neigh_ifinfo_get(neigh2, if_outgoing2);
++	if (WARN_ON(!ifinfo1))
++		goto err_ifinfo1;
+ 
+-	if (WARN_ON(!ifinfo1 || !ifinfo2))
+-		return false;
++	ifinfo2 = batadv_neigh_ifinfo_get(neigh2, if_outgoing2);
++	if (WARN_ON(!ifinfo2))
++		goto err_ifinfo2;
+ 
+ 	threshold = ifinfo1->bat_v.throughput / 4;
+ 	threshold = ifinfo1->bat_v.throughput - threshold;
+ 
+-	return ifinfo2->bat_v.throughput > threshold;
++	ret = ifinfo2->bat_v.throughput > threshold;
++
++	batadv_neigh_ifinfo_put(ifinfo2);
++err_ifinfo2:
++	batadv_neigh_ifinfo_put(ifinfo1);
++err_ifinfo1:
++	return ret;
+ }
+ 
+ static struct batadv_algo_ops batadv_batman_v __read_mostly = {
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index afe66a6..0000000
--- a/batman-adv/patches/0004-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From af3558688698479a56034f0fcbca164be2052aa8 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:48 +0200
-Subject: [PATCH 4/9] batman-adv: Remove unnecessary braces for test_bit() in
- DAT
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: de466678 ("batman-adv: Fix broken DAT capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/distributed-arp-table.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/distributed-arp-table.c b/net/batman-adv/distributed-arp-table.c
-index 1caf7d2..63243a3 100644
---- a/net/batman-adv/distributed-arp-table.c
-+++ b/net/batman-adv/distributed-arp-table.c
-@@ -453,7 +453,7 @@ static bool batadv_is_orig_node_eligible(struct batadv_dat_candidate *res,
- 	int j;
- 
- 	/* check if orig node candidate is running DAT */
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_DAT, &candidate->capabilities)))
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_DAT, &candidate->capabilities))
- 		goto out;
- 
- 	/* Check if this node has already been selected... */
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0005-batman-adv-Fix-double-neigh_node_put-in-batadv_v_ogm.patch b/batman-adv/patches/0005-batman-adv-Fix-double-neigh_node_put-in-batadv_v_ogm.patch
new file mode 100644
index 0000000..8ea3788
--- /dev/null
+++ b/batman-adv/patches/0005-batman-adv-Fix-double-neigh_node_put-in-batadv_v_ogm.patch
@@ -0,0 +1,40 @@
+From fc3e79d9ef2a1006f94e441d9613749cbbe7176a Mon Sep 17 00:00:00 2001
+From: Sven Eckelmann <sven@narfation.org>
+Date: Fri, 6 May 2016 22:27:09 +0200
+Subject: [PATCH 5/6] batman-adv: Fix double neigh_node_put in
+ batadv_v_ogm_route_update
+
+The router is put down twice when it was non-NULL and either orig_ifinfo is
+NULL afterwards or batman-adv receives a packet with the same sequence
+number. This will end up in a use-after-free when the batadv_neigh_node is
+removed because the reference counter ended up too early at 0.
+
+Fixes: 667996ebeab4 ("batman-adv: OGMv2 - implement originators logic")
+Reported-by: Gui Iribarren <gui@altermundi.net>
+Tested-by: Antonio Quartulli <a@unstable.cc>
+Tested-by: Marek Lindner <mareklindner@neomailbox.ch>
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/bat_v_ogm.c | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/net/batman-adv/bat_v_ogm.c b/net/batman-adv/bat_v_ogm.c
+index d9bcbe6..91df28a 100644
+--- a/net/batman-adv/bat_v_ogm.c
++++ b/net/batman-adv/bat_v_ogm.c
+@@ -529,8 +529,10 @@ static void batadv_v_ogm_route_update(struct batadv_priv *bat_priv,
+ 		goto out;
+ 	}
+ 
+-	if (router)
++	if (router) {
+ 		batadv_neigh_node_put(router);
++		router = NULL;
++	}
+ 
+ 	/* Update routes, and check if the OGM is from the best next hop */
+ 	batadv_v_ogm_orig_update(bat_priv, orig_node, neigh_node, ogm2,
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index eecbdcd..0000000
--- a/batman-adv/patches/0005-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,32 +0,0 @@
-From 5abaf07b4c24ab2d7bd9b0c0de946b1ee5e946ff Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:49 +0200
-Subject: [PATCH 5/9] batman-adv: Remove unnecessary braces for test_bit() in
- NC
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: dfb27e75 ("batman-adv: Fix broken NC capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/network-coding.c | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/network-coding.c b/net/batman-adv/network-coding.c
-index 55a0b28..1a1f7e6 100644
---- a/net/batman-adv/network-coding.c
-+++ b/net/batman-adv/network-coding.c
-@@ -894,7 +894,7 @@ void batadv_nc_update_nc_node(struct batadv_priv *bat_priv,
- 		goto out;
- 
- 	/* check if orig node is network coding enabled */
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_NC, &orig_node->capabilities)))
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_NC, &orig_node->capabilities))
- 		goto out;
- 
- 	/* accept ogms from 'good' neighbors and single hop neighbors */
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch b/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
deleted file mode 100644
index a4b4292..0000000
--- a/batman-adv/patches/0006-batman-adv-Remove-unnecessary-braces-for-test_bit-in.patch
+++ /dev/null
@@ -1,41 +0,0 @@
-From d126204d0471e0972142697f36364443a0bbc9cc Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Linus=20L=C3=BCssing?= <linus.luessing@c0d3.blue>
-Date: Fri, 14 Aug 2015 17:23:50 +0200
-Subject: [PATCH 6/9] batman-adv: Remove unnecessary braces for test_bit() in
- MCAST
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Fixes: 1798ad3f ("batman-adv: Fix broken MCAST capability check")
-Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/multicast.c | 4 ++--
- 1 file changed, 2 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/multicast.c b/net/batman-adv/multicast.c
-index 8bdd69f..4541f08 100644
---- a/net/batman-adv/multicast.c
-+++ b/net/batman-adv/multicast.c
-@@ -740,7 +740,7 @@ static void batadv_mcast_tvlv_ogm_handler_v1(struct batadv_priv *bat_priv,
- 	 * is a completely new orig_node no need to decrease the counter.
- 	 */
- 	if (orig_mcast_enabled &&
--	    !(test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities))) {
-+	    !test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities)) {
- 		if (orig_initialized)
- 			atomic_dec(&bat_priv->mcast.num_disabled);
- 		set_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities);
-@@ -798,7 +798,7 @@ void batadv_mcast_purge_orig(struct batadv_orig_node *orig)
- 
- 	spin_lock_bh(&orig->mcast_handler_lock);
- 
--	if (!(test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities)) &&
-+	if (!test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capabilities) &&
- 	    test_bit(BATADV_ORIG_CAPA_HAS_MCAST, &orig->capa_initialized))
- 		atomic_dec(&bat_priv->mcast.num_disabled);
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0006-batman-adv-initialize-ELP-orig-address-on-secondary-.patch b/batman-adv/patches/0006-batman-adv-initialize-ELP-orig-address-on-secondary-.patch
new file mode 100644
index 0000000..f87ddf0
--- /dev/null
+++ b/batman-adv/patches/0006-batman-adv-initialize-ELP-orig-address-on-secondary-.patch
@@ -0,0 +1,110 @@
+From f58a0b03873fd3aa9568c11af198f997ed2208cc Mon Sep 17 00:00:00 2001
+From: Marek Lindner <mareklindner@neomailbox.ch>
+Date: Sat, 7 May 2016 19:54:17 +0800
+Subject: [PATCH 6/6] batman-adv: initialize ELP orig address on secondary
+ interfaces
+
+This fix prevents nodes to wrongly create a 00:00:00:00:00:00 originator
+which can potentially interfere with the rest of the neighbor statistics.
+
+Fixes: a4b88af77e28 ("batman-adv: ELP - adding basic infrastructure")
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+---
+ net/batman-adv/bat_v.c     | 10 ++++++++++
+ net/batman-adv/bat_v_elp.c | 31 ++++++++++++++++++++++---------
+ net/batman-adv/bat_v_elp.h |  2 ++
+ 3 files changed, 34 insertions(+), 9 deletions(-)
+
+diff --git a/net/batman-adv/bat_v.c b/net/batman-adv/bat_v.c
+index 2bcb29b..0caca2f 100644
+--- a/net/batman-adv/bat_v.c
++++ b/net/batman-adv/bat_v.c
+@@ -39,6 +39,16 @@
+ 
+ static void batadv_v_iface_activate(struct batadv_hard_iface *hard_iface)
+ {
++	struct batadv_priv *bat_priv = netdev_priv(hard_iface->soft_iface);
++	struct batadv_hard_iface *primary_if;
++
++	primary_if = batadv_primary_if_get_selected(bat_priv);
++
++	if (primary_if) {
++		batadv_v_elp_iface_activate(primary_if, hard_iface);
++		batadv_hardif_put(primary_if);
++	}
++
+ 	/* B.A.T.M.A.N. V does not use any queuing mechanism, therefore it can
+ 	 * set the interface as ACTIVE right away, without any risk of race
+ 	 * condition
+diff --git a/net/batman-adv/bat_v_elp.c b/net/batman-adv/bat_v_elp.c
+index 3844e7e..df42eb1 100644
+--- a/net/batman-adv/bat_v_elp.c
++++ b/net/batman-adv/bat_v_elp.c
+@@ -377,6 +377,27 @@ void batadv_v_elp_iface_disable(struct batadv_hard_iface *hard_iface)
+ }
+ 
+ /**
++ * batadv_v_elp_iface_activate - update the ELP buffer belonging to the given
++ *  hard-interface
++ * @primary_iface: the new primary interface
++ * @hard_iface: interface holding the to-be-updated buffer
++ */
++void batadv_v_elp_iface_activate(struct batadv_hard_iface *primary_iface,
++				 struct batadv_hard_iface *hard_iface)
++{
++	struct batadv_elp_packet *elp_packet;
++	struct sk_buff *skb;
++
++	if (!hard_iface->bat_v.elp_skb)
++		return;
++
++	skb = hard_iface->bat_v.elp_skb;
++	elp_packet = (struct batadv_elp_packet *)skb->data;
++	ether_addr_copy(elp_packet->orig,
++			primary_iface->net_dev->dev_addr);
++}
++
++/**
+  * batadv_v_elp_primary_iface_set - change internal data to reflect the new
+  *  primary interface
+  * @primary_iface: the new primary interface
+@@ -384,8 +405,6 @@ void batadv_v_elp_iface_disable(struct batadv_hard_iface *hard_iface)
+ void batadv_v_elp_primary_iface_set(struct batadv_hard_iface *primary_iface)
+ {
+ 	struct batadv_hard_iface *hard_iface;
+-	struct batadv_elp_packet *elp_packet;
+-	struct sk_buff *skb;
+ 
+ 	/* update orig field of every elp iface belonging to this mesh */
+ 	rcu_read_lock();
+@@ -393,13 +412,7 @@ void batadv_v_elp_primary_iface_set(struct batadv_hard_iface *primary_iface)
+ 		if (primary_iface->soft_iface != hard_iface->soft_iface)
+ 			continue;
+ 
+-		if (!hard_iface->bat_v.elp_skb)
+-			continue;
+-
+-		skb = hard_iface->bat_v.elp_skb;
+-		elp_packet = (struct batadv_elp_packet *)skb->data;
+-		ether_addr_copy(elp_packet->orig,
+-				primary_iface->net_dev->dev_addr);
++		batadv_v_elp_iface_activate(primary_iface, hard_iface);
+ 	}
+ 	rcu_read_unlock();
+ }
+diff --git a/net/batman-adv/bat_v_elp.h b/net/batman-adv/bat_v_elp.h
+index e95f1bc..cc130b2 100644
+--- a/net/batman-adv/bat_v_elp.h
++++ b/net/batman-adv/bat_v_elp.h
+@@ -25,6 +25,8 @@ struct work_struct;
+ 
+ int batadv_v_elp_iface_enable(struct batadv_hard_iface *hard_iface);
+ void batadv_v_elp_iface_disable(struct batadv_hard_iface *hard_iface);
++void batadv_v_elp_iface_activate(struct batadv_hard_iface *primary_iface,
++				 struct batadv_hard_iface *hard_iface);
+ void batadv_v_elp_primary_iface_set(struct batadv_hard_iface *primary_iface);
+ int batadv_v_elp_packet_recv(struct sk_buff *skb,
+ 			     struct batadv_hard_iface *if_incoming);
+-- 
+2.8.0.rc3
+
diff --git a/batman-adv/patches/0007-batman-adv-Add-missing-include-for-batadv_v_neigh_is.patch b/batman-adv/patches/0007-batman-adv-Add-missing-include-for-batadv_v_neigh_is.patch
new file mode 100644
index 0000000..82ffd07
--- /dev/null
+++ b/batman-adv/patches/0007-batman-adv-Add-missing-include-for-batadv_v_neigh_is.patch
@@ -0,0 +1,28 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 7 May 2016 09:50:44 +0200
+Subject: [PATCH] batman-adv: Add missing include for batadv_v_neigh_is_sob
+
+batadv_v_neigh_is_sob started to use false which is defined in
+linux/stddef.h.
+
+Fixes: 036aa7b7181e ("batman-adv: Avoid nullptr derefence in batadv_v_neigh_is_sob")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/9685688ae7dd85804aec2f6ce760611551fe9635
+---
+ net/batman-adv/bat_v.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/net/batman-adv/bat_v.c b/net/batman-adv/bat_v.c
+index 0caca2f..1f960c9 100644
+--- a/net/batman-adv/bat_v.c
++++ b/net/batman-adv/bat_v.c
+@@ -27,6 +27,7 @@
+ #include <linux/rculist.h>
+ #include <linux/rcupdate.h>
+ #include <linux/seq_file.h>
++#include <linux/stddef.h>
+ #include <linux/types.h>
+ #include <linux/workqueue.h>
+ 
diff --git a/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch b/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch
deleted file mode 100644
index d88508a..0000000
--- a/batman-adv/patches/0007-batman-adv-fix-speedy-join-for-DAT-cache-replies.patch
+++ /dev/null
@@ -1,58 +0,0 @@
-From 2decb5f1fef1484f1b7319aaf2f36b5492d8d943 Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:54 +0200
-Subject: [PATCH 7/9] batman-adv: fix speedy join for DAT cache replies
-
-DAT Cache replies are answered on behalf of other clients which are not
-connected to the answering originator. Therefore, we shouldn't add these
-clients to the answering originators TT table through speed join to
-avoid bogus entries.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/routing.c | 19 +++++++++++++++----
- 1 file changed, 15 insertions(+), 4 deletions(-)
-
-diff --git a/net/batman-adv/routing.c b/net/batman-adv/routing.c
-index c360c0c..96b5daa 100644
---- a/net/batman-adv/routing.c
-+++ b/net/batman-adv/routing.c
-@@ -836,6 +836,7 @@ int batadv_recv_unicast_packet(struct sk_buff *skb,
- 	uint8_t *orig_addr;
- 	struct batadv_orig_node *orig_node = NULL;
- 	int check, hdr_size = sizeof(*unicast_packet);
-+	enum batadv_subtype subtype;
- 	bool is4addr;
- 
- 	unicast_packet = (struct batadv_unicast_packet *)skb->data;
-@@ -863,10 +864,20 @@ int batadv_recv_unicast_packet(struct sk_buff *skb,
- 	/* packet for me */
- 	if (batadv_is_my_mac(bat_priv, unicast_packet->dest)) {
- 		if (is4addr) {
--			batadv_dat_inc_counter(bat_priv,
--					       unicast_4addr_packet->subtype);
--			orig_addr = unicast_4addr_packet->src;
--			orig_node = batadv_orig_hash_find(bat_priv, orig_addr);
-+			subtype = unicast_4addr_packet->subtype;
-+			batadv_dat_inc_counter(bat_priv, subtype);
-+
-+			/* Only payload data should be considered for speedy
-+			 * join. For example, DAT also uses unicast 4addr
-+			 * types, but those packets should not be considered
-+			 * for speedy join, since the clients do not actually
-+			 * reside at the sending originator.
-+			 */
-+			if (subtype == BATADV_P_DATA) {
-+				orig_addr = unicast_4addr_packet->src;
-+				orig_node = batadv_orig_hash_find(bat_priv,
-+								  orig_addr);
-+			}
- 		}
- 
- 		if (batadv_dat_snoop_incoming_arp_request(bat_priv, skb,
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch b/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch
deleted file mode 100644
index 0e7dbab..0000000
--- a/batman-adv/patches/0008-batman-adv-avoid-keeping-false-temporary-entry.patch
+++ /dev/null
@@ -1,51 +0,0 @@
-From 4a73d7438dfb60c7ac82758875292bc14f363b45 Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:55 +0200
-Subject: [PATCH 8/9] batman-adv: avoid keeping false temporary entry
-
-In the case when a temporary entry is added first and a proper tt entry
-is added after that, the temporary tt entry is kept in the orig list.
-However the temporary flag is removed at this point, and therefore the
-purge function can not find this temporary entry anymore.
-
-Therefore, remove the previous temp entry before adding the new proper
-one.
-
-This case can happen if a client behind a given originator moves before
-the TT announcement is sent out. Other than that, this case can also be
-created by bogus or malicious payload frames for VLANs which are not
-existent on the sending originator.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 10 ++++++++--
- 1 file changed, 8 insertions(+), 2 deletions(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 39283ff..9ac1a46 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -1419,9 +1419,15 @@ static bool batadv_tt_global_add(struct batadv_priv *bat_priv,
- 		}
- 
- 		/* if the client was temporary added before receiving the first
--		 * OGM announcing it, we have to clear the TEMP flag
-+		 * OGM announcing it, we have to clear the TEMP flag. Also,
-+		 * remove the previous temporary orig node and re-add it
-+		 * if required. If the orig entry changed, the new one which
-+		 * is a non-temporary entry is preferred.
- 		 */
--		common->flags &= ~BATADV_TT_CLIENT_TEMP;
-+		if (common->flags & BATADV_TT_CLIENT_TEMP) {
-+			batadv_tt_global_del_orig_list(tt_global_entry);
-+			common->flags &= ~BATADV_TT_CLIENT_TEMP;
-+		}
- 
- 		/* the change can carry possible "attribute" flags like the
- 		 * TT_CLIENT_WIFI, therefore they have to be copied in the
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0008-batman-adv-fix-skb-deref-after-free.patch b/batman-adv/patches/0008-batman-adv-fix-skb-deref-after-free.patch
new file mode 100644
index 0000000..5c8bfd8
--- /dev/null
+++ b/batman-adv/patches/0008-batman-adv-fix-skb-deref-after-free.patch
@@ -0,0 +1,46 @@
+From: Florian Westphal <fw@strlen.de>
+Date: Tue, 10 May 2016 23:17:59 +0200
+Subject: [PATCH] batman-adv: fix skb deref after free
+
+batadv_send_skb_to_orig() calls dev_queue_xmit() so we can't use skb->len.
+
+Fixes: d28785996ad8 ("batman-adv: network coding - buffer unicast packets before forward")
+
+Signed-off-by: Florian Westphal <fw@strlen.de>
+Reviewed-by: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/6863d3b59fd1f1bef3c4b86707a0b1c5d21e0a07
+---
+ net/batman-adv/routing.c | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/net/batman-adv/routing.c b/net/batman-adv/routing.c
+index b781bf7..0c0c30e 100644
+--- a/net/batman-adv/routing.c
++++ b/net/batman-adv/routing.c
+@@ -601,6 +601,7 @@ static int batadv_route_unicast_packet(struct sk_buff *skb,
+ 	struct batadv_unicast_packet *unicast_packet;
+ 	struct ethhdr *ethhdr = eth_hdr(skb);
+ 	int res, hdr_len, ret = NET_RX_DROP;
++	unsigned int len;
+ 
+ 	unicast_packet = (struct batadv_unicast_packet *)skb->data;
+ 
+@@ -641,6 +642,7 @@ static int batadv_route_unicast_packet(struct sk_buff *skb,
+ 	if (hdr_len > 0)
+ 		batadv_skb_set_priority(skb, hdr_len);
+ 
++	len = skb->len;
+ 	res = batadv_send_skb_to_orig(skb, orig_node, recv_if);
+ 
+ 	/* translate transmit result into receive result */
+@@ -648,7 +650,7 @@ static int batadv_route_unicast_packet(struct sk_buff *skb,
+ 		/* skb was transmitted and consumed */
+ 		batadv_inc_counter(bat_priv, BATADV_CNT_FORWARD);
+ 		batadv_add_counter(bat_priv, BATADV_CNT_FORWARD_BYTES,
+-				   skb->len + ETH_HLEN);
++				   len + ETH_HLEN);
+ 
+ 		ret = NET_RX_SUCCESS;
+ 	} else if (res == NET_XMIT_POLICED) {
diff --git a/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch b/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch
deleted file mode 100644
index 66e0dcf..0000000
--- a/batman-adv/patches/0009-batman-adv-detect-local-excess-vlans-in-TT-request.patch
+++ /dev/null
@@ -1,55 +0,0 @@
-From 2dd1d9f06ac1208b1921aa90d479c3940bc70b4f Mon Sep 17 00:00:00 2001
-From: Simon Wunderlich <sw@simonwunderlich.de>
-Date: Wed, 2 Sep 2015 20:09:56 +0200
-Subject: [PATCH 9/9] batman-adv: detect local excess vlans in TT request
-
-If the local representation of the global TT table of one originator has
-more VLAN entries than the respective TT update, there is some
-inconsistency present. By detecting and reporting this inconsistency,
-the global table gets updated and the excess VLAN will get removed in
-the process.
-
-Reported-by: Alessandro Bolletta <alessandro@mediaspot.net>
-Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
-Acked-by: Antonio Quartulli <antonio@meshcoding.com>
-Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
----
- net/batman-adv/translation-table.c | 14 +++++++++++++-
- 1 file changed, 13 insertions(+), 1 deletion(-)
-
-diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
-index 9ac1a46..7e4657e 100644
---- a/net/batman-adv/translation-table.c
-+++ b/net/batman-adv/translation-table.c
-@@ -2394,8 +2394,8 @@ static bool batadv_tt_global_check_crc(struct batadv_orig_node *orig_node,
- {
- 	struct batadv_tvlv_tt_vlan_data *tt_vlan_tmp;
- 	struct batadv_orig_node_vlan *vlan;
-+	int i, orig_num_vlan;
- 	uint32_t crc;
--	int i;
- 
- 	/* check if each received CRC matches the locally stored one */
- 	for (i = 0; i < num_vlan; i++) {
-@@ -2421,6 +2421,18 @@ static bool batadv_tt_global_check_crc(struct batadv_orig_node *orig_node,
- 			return false;
- 	}
- 
-+	/* check if any excess VLANs exist locally for the originator
-+	 * which are not mentioned in the TVLV from the originator.
-+	 */
-+	rcu_read_lock();
-+	orig_num_vlan = 0;
-+	list_for_each_entry_rcu(vlan, &orig_node->vlan_list, list)
-+		orig_num_vlan++;
-+	rcu_read_unlock();
-+
-+	if (orig_num_vlan > num_vlan)
-+		return false;
-+
- 	return true;
- }
- 
--- 
-2.5.0
-
diff --git a/batman-adv/patches/0009-batman-adv-replace-WARN-with-rate-limited-output-on-.patch b/batman-adv/patches/0009-batman-adv-replace-WARN-with-rate-limited-output-on-.patch
new file mode 100644
index 0000000..07274b6
--- /dev/null
+++ b/batman-adv/patches/0009-batman-adv-replace-WARN-with-rate-limited-output-on-.patch
@@ -0,0 +1,40 @@
+From: Simon Wunderlich <sw@simonwunderlich.de>
+Date: Thu, 12 May 2016 18:52:03 +0200
+Subject: [PATCH] batman-adv: replace WARN with rate limited output on non-existing VLAN
+
+If a VLAN tagged frame is received and the corresponding VLAN is not
+configured on the soft interface, it will splat a WARN on every packet
+received. This is a quite annoying behaviour for some scenarios, e.g. if
+bat0 is bridged with eth0, and there are arbitrary VLAN tagged frames
+from Ethernet coming in without having any VLAN configuration on bat0.
+
+The code should probably create vlan objects on the fly and
+transparently transport these VLAN-tagged Ethernet frames, but until
+this is done, at least the WARN splat should be replaced by a rate
+limited output.
+
+Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
+Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/04792115d24408a72bf8fccd5c4059478fc15eae
+---
+ net/batman-adv/translation-table.c | 6 ++++--
+ 1 file changed, 4 insertions(+), 2 deletions(-)
+
+diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
+index 9b4551a..48adb91 100644
+--- a/net/batman-adv/translation-table.c
++++ b/net/batman-adv/translation-table.c
+@@ -650,8 +650,10 @@ bool batadv_tt_local_add(struct net_device *soft_iface, const u8 *addr,
+ 
+ 	/* increase the refcounter of the related vlan */
+ 	vlan = batadv_softif_vlan_get(bat_priv, vid);
+-	if (WARN(!vlan, "adding TT local entry %pM to non-existent VLAN %d",
+-		 addr, BATADV_PRINT_VID(vid))) {
++	if (!vlan) {
++		net_ratelimited_function(batadv_info, soft_iface,
++					 "adding TT local entry %pM to non-existent VLAN %d\n",
++					 addr, BATADV_PRINT_VID(vid));
+ 		kfree(tt_local);
+ 		tt_local = NULL;
+ 		goto out;
diff --git a/batman-adv/patches/0010-batman-adv-Fix-build-against-recent-Debian-Stretch-k.patch b/batman-adv/patches/0010-batman-adv-Fix-build-against-recent-Debian-Stretch-k.patch
new file mode 100644
index 0000000..127cac8
--- /dev/null
+++ b/batman-adv/patches/0010-batman-adv-Fix-build-against-recent-Debian-Stretch-k.patch
@@ -0,0 +1,58 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 28 May 2016 10:32:48 +0200
+Subject: [PATCH] batman-adv: Fix build against recent Debian Stretch kernels
+
+The kernels for Debian stretch require some special CFLAGS settings which
+are only correctly defined when NOSTDINC_FLAGS is defined inside the
+execution of the Makefile via kbuild. But batman-adv sets it currently
+outside to insert compatibility include headers and compat-sources.
+
+This can be avoided by making the top Makefile kbuild compatible and
+redefining the NOSTDINC_FLAGS when kbuild include this Makefile. The actual
+build of the batman-adv module is then done by adding the subdirectory to
+obj-y.
+
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Tested-by: Martin Weinelt <martin@darmstadt.freifunk.net>
+
+Origin: https://git.open-mesh.org/batman-adv.git/commit/f8fd441e1e30f3a274c9bf44cc33372d4065cbb6
+---
+ Makefile | 10 +++++++---
+ 1 file changed, 7 insertions(+), 3 deletions(-)
+
+diff --git a/Makefile b/Makefile
+index 5d2c058..2568fb2 100644
+--- a/Makefile
++++ b/Makefile
+@@ -43,7 +43,7 @@ RM ?= rm -f
+ REVISION= $(shell	if [ -d "$(PWD)/.git" ]; then \
+ 				echo $$(git --git-dir="$(PWD)/.git" describe --always --dirty --match "v*" |sed 's/^v//' 2> /dev/null || echo "[unknown]"); \
+ 			fi)
+-export NOSTDINC_FLAGS := \
++NOSTDINC_FLAGS += \
+ 	-I$(PWD)/compat-include/ \
+ 	-include $(PWD)/compat.h \
+ 	$(CFLAGS)
+@@ -52,8 +52,12 @@ ifneq ($(REVISION),)
+ NOSTDINC_FLAGS += -DBATADV_SOURCE_VERSION=\"$(REVISION)\"
+ endif
+ 
++obj-y += net/batman-adv/
++
+ BUILD_FLAGS := \
+-	M=$(PWD)/net/batman-adv \
++	M=$(PWD) \
++	PWD=$(PWD) \
++	REVISION=$(REVISION) \
+ 	CONFIG_BATMAN_ADV=m \
+ 	CONFIG_BATMAN_ADV_DEBUG=$(CONFIG_BATMAN_ADV_DEBUG) \
+ 	CONFIG_BATMAN_ADV_BLA=$(CONFIG_BATMAN_ADV_BLA) \
+@@ -61,7 +65,7 @@ BUILD_FLAGS := \
+ 	CONFIG_BATMAN_ADV_NC=$(CONFIG_BATMAN_ADV_NC) \
+ 	CONFIG_BATMAN_ADV_MCAST=$(CONFIG_BATMAN_ADV_MCAST) \
+ 	CONFIG_BATMAN_ADV_BATMAN_V=$(CONFIG_BATMAN_ADV_BATMAN_V) \
+-	INSTALL_MOD_DIR=updates/net/batman-adv/
++	INSTALL_MOD_DIR=updates/
+ 
+ all: config
+ 	$(MAKE) -C $(KERNELPATH) $(BUILD_FLAGS)	modules
diff --git a/batman-adv/patches/0011-batman-adv-Clean-up-untagged-vlan-when-destroying-vi.patch b/batman-adv/patches/0011-batman-adv-Clean-up-untagged-vlan-when-destroying-vi.patch
new file mode 100644
index 0000000..b03d795
--- /dev/null
+++ b/batman-adv/patches/0011-batman-adv-Clean-up-untagged-vlan-when-destroying-vi.patch
@@ -0,0 +1,45 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 28 May 2016 14:38:26 +0200
+Subject: [PATCH] batman-adv: Clean up untagged vlan when destroying via rtnl-link
+
+The untagged vlan object is only destroyed when the interface is removed
+via the legacy sysfs interface. But it also has to be destroyed when the
+standard rtnl-link interface is used.
+
+Fixes: 952cebb57518 ("batman-adv: add per VLAN interface attribute framework")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Cc: Antonio Quartulli <a@unstable.cc>
+
+Origin: https://git.open-mesh.org/batman-adv.git/commit/e721749d57ff57d6df4017d62797626eab9902f1
+---
+ net/batman-adv/soft-interface.c | 9 +++++++++
+ 1 file changed, 9 insertions(+)
+
+diff --git a/net/batman-adv/soft-interface.c b/net/batman-adv/soft-interface.c
+index 8a136b6..3710620 100644
+--- a/net/batman-adv/soft-interface.c
++++ b/net/batman-adv/soft-interface.c
+@@ -1017,7 +1017,9 @@ void batadv_softif_destroy_sysfs(struct net_device *soft_iface)
+ static void batadv_softif_destroy_netlink(struct net_device *soft_iface,
+ 					  struct list_head *head)
+ {
++	struct batadv_priv *bat_priv = netdev_priv(soft_iface);
+ 	struct batadv_hard_iface *hard_iface;
++	struct batadv_softif_vlan *vlan;
+ 
+ 	list_for_each_entry(hard_iface, &batadv_hardif_list, list) {
+ 		if (hard_iface->soft_iface == soft_iface)
+@@ -1025,6 +1027,13 @@ static void batadv_softif_destroy_netlink(struct net_device *soft_iface,
+ 							BATADV_IF_CLEANUP_KEEP);
+ 	}
+ 
++	/* destroy the "untagged" VLAN */
++	vlan = batadv_softif_vlan_get(bat_priv, BATADV_NO_FLAGS);
++	if (vlan) {
++		batadv_softif_destroy_vlan(bat_priv, vlan);
++		batadv_softif_vlan_put(vlan);
++	}
++
+ 	batadv_sysfs_del_meshif(soft_iface);
+ 	unregister_netdevice_queue(soft_iface, head);
+ }
diff --git a/batman-adv/patches/0012-batman-adv-Fix-ICMP-RR-ethernet-access-after-skb_lin.patch b/batman-adv/patches/0012-batman-adv-Fix-ICMP-RR-ethernet-access-after-skb_lin.patch
new file mode 100644
index 0000000..5204cdc
--- /dev/null
+++ b/batman-adv/patches/0012-batman-adv-Fix-ICMP-RR-ethernet-access-after-skb_lin.patch
@@ -0,0 +1,31 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sun, 29 May 2016 21:25:52 +0200
+Subject: [PATCH] batman-adv: Fix ICMP RR ethernet access after skb_linearize
+
+The skb_linearize may reallocate the skb. This makes the calculated pointer
+for ethhdr invalid. But it the pointer is used later to fill in the RR
+field of the batadv_icmp_packet_rr packet.
+
+Instead re-evaluate eth_hdr after the skb_linearize+skb_cow to fix the
+pointer and avoid the invalid read.
+
+Fixes: bb69cb678d37 ("batman-adv: generalize batman-adv icmp packet handling")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/f6c80c29ef4e8b45b715976107b7ae06fc0be3a0
+---
+ net/batman-adv/routing.c | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/net/batman-adv/routing.c b/net/batman-adv/routing.c
+index 0c0c30e..27e07dd 100644
+--- a/net/batman-adv/routing.c
++++ b/net/batman-adv/routing.c
+@@ -374,6 +374,7 @@ int batadv_recv_icmp_packet(struct sk_buff *skb,
+ 		if (skb_cow(skb, ETH_HLEN) < 0)
+ 			goto out;
+ 
++		ethhdr = eth_hdr(skb);
+ 		icmph = (struct batadv_icmp_header *)skb->data;
+ 		icmp_packet_rr = (struct batadv_icmp_packet_rr *)icmph;
+ 		if (icmp_packet_rr->rr_cur >= BATADV_RR_LEN)
diff --git a/batman-adv/patches/0013-batman-adv-Fix-double-put-of-vlan-object.patch b/batman-adv/patches/0013-batman-adv-Fix-double-put-of-vlan-object.patch
new file mode 100644
index 0000000..6ea8311
--- /dev/null
+++ b/batman-adv/patches/0013-batman-adv-Fix-double-put-of-vlan-object.patch
@@ -0,0 +1,32 @@
+From: Ben Hutchings <ben@decadent.org.uk>
+Date: Fri, 3 Jun 2016 00:00:44 +0100
+Subject: [PATCH] batman-adv: Fix double-put of vlan object
+
+Commit a33d970d0b54 "batman-adv: Fix reference counting of vlan object
+for tt_local_entry") makes each batadv_tt_local_entry hold a single
+reference to a batadv_softif_vlan.  In case a new entry cannot be
+added to the hash table, the error path puts the reference, but the
+reference will also now be dropped by batadv_tt_local_entry_release().
+
+Fixes: a33d970d0b54 ("batman-adv: Fix reference counting of vlan object ...")
+Cc: Sven Eckelmann <sven@narfation.org>
+Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
+Acked-by: Sven Eckelmann <sven@narfation.org>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/22bb8b894900064d3fb09032a47577e89fc30d7c
+---
+ net/batman-adv/translation-table.c | 1 -
+ 1 file changed, 1 deletion(-)
+
+diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
+index 48adb91..5ed782b 100644
+--- a/net/batman-adv/translation-table.c
++++ b/net/batman-adv/translation-table.c
+@@ -693,7 +693,6 @@ bool batadv_tt_local_add(struct net_device *soft_iface, const u8 *addr,
+ 	if (unlikely(hash_added != 0)) {
+ 		/* remove the reference for the hash */
+ 		batadv_tt_local_entry_put(tt_local);
+-		batadv_softif_vlan_put(vlan);
+ 		goto out;
+ 	}
+ 
diff --git a/batman-adv/patches/0014-batman-adv-Fix-use-after-free-double-free-of-tt_req_.patch b/batman-adv/patches/0014-batman-adv-Fix-use-after-free-double-free-of-tt_req_.patch
new file mode 100644
index 0000000..33c7f3b
--- /dev/null
+++ b/batman-adv/patches/0014-batman-adv-Fix-use-after-free-double-free-of-tt_req_.patch
@@ -0,0 +1,172 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 4 Jun 2016 08:52:12 +0200
+Subject: [PATCH] batman-adv: Fix use-after-free/double-free of tt_req_node
+
+The tt_req_node is added and removed from a list inside a spinlock. But the
+locking is sometimes removed even when the object is still referenced and
+will be used later via this reference. For example batadv_send_tt_request
+can create a new tt_req_node (including add to a list) and later
+re-acquires the lock to remove it from the list and to free it. But at this
+time another context could have already removed this tt_req_node from the
+list and freed it.
+
+CPU#0
+
+    batadv_batman_skb_recv from net_device 0
+    -> batadv_iv_ogm_receive
+      -> batadv_iv_ogm_process
+        -> batadv_iv_ogm_process_per_outif
+          -> batadv_tvlv_ogm_receive
+            -> batadv_tvlv_ogm_receive
+              -> batadv_tvlv_containers_process
+                -> batadv_tvlv_call_handler
+                  -> batadv_tt_tvlv_ogm_handler_v1
+                    -> batadv_tt_update_orig
+                      -> batadv_send_tt_request
+                        -> batadv_tt_req_node_new
+                           spin_lock(...)
+                           allocates new tt_req_node and adds it to list
+                           spin_unlock(...)
+                           return tt_req_node
+
+CPU#1
+
+    batadv_batman_skb_recv from net_device 1
+    -> batadv_recv_unicast_tvlv
+      -> batadv_tvlv_containers_process
+        -> batadv_tvlv_call_handler
+          -> batadv_tt_tvlv_unicast_handler_v1
+            -> batadv_handle_tt_response
+               spin_lock(...)
+               tt_req_node gets removed from list and is freed
+               spin_unlock(...)
+
+CPU#0
+
+                      <- returned to batadv_send_tt_request
+                         spin_lock(...)
+                         tt_req_node gets removed from list and is freed
+                         MEMORY CORRUPTION/SEGFAULT/...
+                         spin_unlock(...)
+
+This can only be solved via reference counting to allow multiple contexts
+to handle the list manipulation while making sure that only the last
+context holding a reference will free the object.
+
+Fixes: cea194d90b11 ("batman-adv: improved client announcement mechanism")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+Tested-by: Martin Weinelt <martin@darmstadt.freifunk.net>
+Tested-by: Amadeus Alfa <amadeus@chemnitz.freifunk.net>
+
+Origin: upstream, https://git.open-mesh.org/batman-adv.git/commit/c3fef3d9ec6e8b882f321ec20f6f2cb2ee906503
+---
+ net/batman-adv/translation-table.c | 37 +++++++++++++++++++++++++++++++++----
+ net/batman-adv/types.h             |  2 ++
+ 2 files changed, 35 insertions(+), 4 deletions(-)
+
+diff --git a/net/batman-adv/translation-table.c b/net/batman-adv/translation-table.c
+index 5ed782b..23fb7ea 100644
+--- a/net/batman-adv/translation-table.c
++++ b/net/batman-adv/translation-table.c
+@@ -2271,6 +2271,29 @@ static u32 batadv_tt_local_crc(struct batadv_priv *bat_priv,
+ 	return crc;
+ }
+ 
++/**
++ * batadv_tt_req_node_release - free tt_req node entry
++ * @ref: kref pointer of the tt req_node entry
++ */
++static void batadv_tt_req_node_release(struct kref *ref)
++{
++	struct batadv_tt_req_node *tt_req_node;
++
++	tt_req_node = container_of(ref, struct batadv_tt_req_node, refcount);
++
++	kfree(tt_req_node);
++}
++
++/**
++ * batadv_tt_req_node_put - decrement the tt_req_node refcounter and
++ *  possibly release it
++ * @tt_req_node: tt_req_node to be free'd
++ */
++static void batadv_tt_req_node_put(struct batadv_tt_req_node *tt_req_node)
++{
++	kref_put(&tt_req_node->refcount, batadv_tt_req_node_release);
++}
++
+ static void batadv_tt_req_list_free(struct batadv_priv *bat_priv)
+ {
+ 	struct batadv_tt_req_node *node;
+@@ -2280,7 +2303,7 @@ static void batadv_tt_req_list_free(struct batadv_priv *bat_priv)
+ 
+ 	hlist_for_each_entry_safe(node, safe, &bat_priv->tt.req_list, list) {
+ 		hlist_del_init(&node->list);
+-		kfree(node);
++		batadv_tt_req_node_put(node);
+ 	}
+ 
+ 	spin_unlock_bh(&bat_priv->tt.req_list_lock);
+@@ -2317,7 +2340,7 @@ static void batadv_tt_req_purge(struct batadv_priv *bat_priv)
+ 		if (batadv_has_timed_out(node->issued_at,
+ 					 BATADV_TT_REQUEST_TIMEOUT)) {
+ 			hlist_del_init(&node->list);
+-			kfree(node);
++			batadv_tt_req_node_put(node);
+ 		}
+ 	}
+ 	spin_unlock_bh(&bat_priv->tt.req_list_lock);
+@@ -2349,9 +2372,11 @@ batadv_tt_req_node_new(struct batadv_priv *bat_priv,
+ 	if (!tt_req_node)
+ 		goto unlock;
+ 
++	kref_init(&tt_req_node->refcount);
+ 	ether_addr_copy(tt_req_node->addr, orig_node->orig);
+ 	tt_req_node->issued_at = jiffies;
+ 
++	kref_get(&tt_req_node->refcount);
+ 	hlist_add_head(&tt_req_node->list, &bat_priv->tt.req_list);
+ unlock:
+ 	spin_unlock_bh(&bat_priv->tt.req_list_lock);
+@@ -2618,9 +2643,13 @@ out:
+ 		spin_lock_bh(&bat_priv->tt.req_list_lock);
+ 		/* hlist_del_init() verifies tt_req_node still is in the list */
+ 		hlist_del_init(&tt_req_node->list);
++		batadv_tt_req_node_put(tt_req_node);
+ 		spin_unlock_bh(&bat_priv->tt.req_list_lock);
+-		kfree(tt_req_node);
+ 	}
++
++	if (tt_req_node)
++		batadv_tt_req_node_put(tt_req_node);
++
+ 	kfree(tvlv_tt_data);
+ 	return ret;
+ }
+@@ -3056,7 +3085,7 @@ static void batadv_handle_tt_response(struct batadv_priv *bat_priv,
+ 		if (!batadv_compare_eth(node->addr, resp_src))
+ 			continue;
+ 		hlist_del_init(&node->list);
+-		kfree(node);
++		batadv_tt_req_node_put(node);
+ 	}
+ 
+ 	spin_unlock_bh(&bat_priv->tt.req_list_lock);
+diff --git a/net/batman-adv/types.h b/net/batman-adv/types.h
+index 1e47fbe..d75beef 100644
+--- a/net/batman-adv/types.h
++++ b/net/batman-adv/types.h
+@@ -1129,11 +1129,13 @@ struct batadv_tt_change_node {
+  * struct batadv_tt_req_node - data to keep track of the tt requests in flight
+  * @addr: mac address address of the originator this request was sent to
+  * @issued_at: timestamp used for purging stale tt requests
++ * @refcount: number of contexts the object is used by
+  * @list: list node for batadv_priv_tt::req_list
+  */
+ struct batadv_tt_req_node {
+ 	u8 addr[ETH_ALEN];
+ 	unsigned long issued_at;
++	struct kref refcount;
+ 	struct hlist_node list;
+ };
+ 
