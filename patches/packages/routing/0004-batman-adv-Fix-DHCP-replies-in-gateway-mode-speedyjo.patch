From: Sven Eckelmann <sven@narfation.org>
Date: Sun, 12 Jun 2016 11:43:59 +0200
Subject: [PATCH] batman-adv: Fix DHCP replies in gateway mode + speedyjoin
---
 ...dv-Fix-speedy-join-in-gateway-client-mode.patch | 35 ++++++++++++++++++
 ...Use-broadcast-as-fallback-for-gateway-rep.patch | 43 ++++++++++++++++++++++
 2 files changed, 78 insertions(+)
 create mode 100644 batman-adv/patches/0015-batman-adv-Fix-speedy-join-in-gateway-client-mode.patch
 create mode 100644 batman-adv/patches/0016-batman-adv-Use-broadcast-as-fallback-for-gateway-rep.patch

diff --git a/batman-adv/patches/0015-batman-adv-Fix-speedy-join-in-gateway-client-mode.patch b/batman-adv/patches/0015-batman-adv-Fix-speedy-join-in-gateway-client-mode.patch
new file mode 100644
index 0000000..127e358
--- /dev/null
+++ b/batman-adv/patches/0015-batman-adv-Fix-speedy-join-in-gateway-client-mode.patch
@@ -0,0 +1,35 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 11 Jun 2016 22:06:12 +0200
+Subject: [PATCH] batman-adv: Fix speedy join in gateway client mode
+
+Speedy join only works when the received packet is either broadcast or an
+4addr unicast packet. Thus packets converted from broadcast to unicast via
+the gateway handling code have to be converted to 4addr packets to allow
+the receiving gateway server to add the sender address as temporary entry
+to the translation table.
+
+Not doing it will make the batman-adv gateway server drop the DHCP response
+in many situations because it doesn't yet have the TT entry for the
+destination of the DHCP response.
+
+Fixes: 9cbc67d9da47 ("batman-adv: change interface_rx to get orig node")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+---
+ net/batman-adv/send.c | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/net/batman-adv/send.c b/net/batman-adv/send.c
+index ed07adf..7756250 100644
+--- a/net/batman-adv/send.c
++++ b/net/batman-adv/send.c
+@@ -423,8 +423,8 @@ int batadv_send_skb_via_gw(struct batadv_priv *bat_priv, struct sk_buff *skb,
+ 	struct batadv_orig_node *orig_node;
+ 
+ 	orig_node = batadv_gw_get_selected_orig(bat_priv);
+-	return batadv_send_skb_unicast(bat_priv, skb, BATADV_UNICAST, 0,
+-				       orig_node, vid);
++	return batadv_send_skb_unicast(bat_priv, skb, BATADV_UNICAST_4ADDR,
++				       BATADV_P_DATA, orig_node, vid);
+ }
+ 
+ void batadv_schedule_bat_ogm(struct batadv_hard_iface *hard_iface)
diff --git a/batman-adv/patches/0016-batman-adv-Use-broadcast-as-fallback-for-gateway-rep.patch b/batman-adv/patches/0016-batman-adv-Use-broadcast-as-fallback-for-gateway-rep.patch
new file mode 100644
index 0000000..9b01cbe
--- /dev/null
+++ b/batman-adv/patches/0016-batman-adv-Use-broadcast-as-fallback-for-gateway-rep.patch
@@ -0,0 +1,43 @@
+From: Sven Eckelmann <sven@narfation.org>
+Date: Sat, 11 Jun 2016 22:19:46 +0200
+Subject: [PATCH] batman-adv: Use broadcast as fallback for gateway replies
+
+The replies from gateway server to gateway client are usually sent via
+unicast packets. This only works when the destination address for the reply
+is already known to the translation table. But usually the gateway replies
+are in response to the first known contact from a device to the gateway
+server. So it can happen that the TT entry was not yet created.
+
+The gateway server has therefore use broadcast as fallback when the entry
+is not yet known. This makes the first responses from a DHCP server to a
+DHCP client more robust.
+
+Fixes: 2d5b555644b2 ("batman-adv: send every DHCP packet as bat-unicast")
+Signed-off-by: Sven Eckelmann <sven@narfation.org>
+---
+ net/batman-adv/soft-interface.c | 12 ++++++++++++
+ 1 file changed, 12 insertions(+)
+
+diff --git a/net/batman-adv/soft-interface.c b/net/batman-adv/soft-interface.c
+index 3710620..80a52ca 100644
+--- a/net/batman-adv/soft-interface.c
++++ b/net/batman-adv/soft-interface.c
+@@ -296,6 +296,18 @@ send:
+ 			if (forw_mode == BATADV_FORW_SINGLE)
+ 				do_bcast = false;
+ 		}
++
++		/* DHCP to from server to client should use unicast when TT
++		 * entry is available and use broadcast as fallback
++		 */
++		if (!mcast_single_orig && dhcp_rcp == BATADV_DHCP_TO_CLIENT) {
++			mcast_single_orig = batadv_transtable_search(bat_priv,
++								     NULL,
++								     dst_hint,
++								     vid);
++			if (!mcast_single_orig)
++				do_bcast = true;
++		}
+ 	}
+ 
+ 	batadv_skb_set_priority(skb, 0);
